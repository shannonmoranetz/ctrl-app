{"version":3,"sources":["components/Splash.js","components/Bubbles.js","components/Timer.js","components/Circle.js","components/Message.js","components/Options.js","components/App.js","serviceWorker.js","index.js"],"names":["Splash","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","className","onClick","props","toggleSplash","Component","Bubbles","Timer","count","seconds","prompt","inhaleTrue","holdTrue","exhaleTrue","startTimer","clearInterval","timer","setState","updateSeconds","setInterval","tick","bind","Circle","Timer_Timer","data","require","Message","currentMessage","allMessages","createAllMessages","messageArray","map","message","Math","floor","random","length","generateRandomMessage","Options","App","renderSplash","Splash_Splash","addClass","Message_Message","Circle_Circle","Options_Options","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d75e5a2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../../src/styles/main.scss';\n\nexport default class Splash extends Component {\n  constructor() {\n    super();\n    this.state = {\n    }\n  }\n\n  render() {\n    return(\n        <div>\n          <button className=\"start-button\" onClick={this.props.toggleSplash}>\n          breathe</button>\n        </div>\n    )\n  }\n};\n\n","import '../../src/styles/main.scss';\nimport React, { Component } from 'react';\n\nexport default function Bubbles() {\n\n  return(\n    <ul className=\"bubbles\">\n      <li></li>\n      <li></li>\n      <li></li>\n      <li></li>\n      <li></li>\n      <li></li>\n      <li></li>\n      <li></li>\n      <li></li>\n      <li></li>\n    </ul>\n  )\n};","import React, { Component } from 'react';\nimport '../../src/styles/main.scss';\n\nexport default class Timer extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      count: 1,\n      seconds: 4,\n      prompt: 'inhale',\n      inhaleTrue: true,\n      holdTrue: false,\n      exhaleTrue: false\n    }\n  }\n\n  componentWillMount() {\n    this.startTimer()\n  }\n    \n  componentWillUnmount() {\n    clearInterval(this.timer)\n  }\n\n  tick() {\n    this.setState({\n      count: (this.state.count + 1),\n      seconds: (this.state.seconds - 1)\n    })\n    this.updateSeconds()\n    if (this.state.count < 5) {\n      this.setState({\n        prompt: 'inhale',\n        inhaleTrue: true,\n        holdTrue: false,\n        exhaleTrue: false\n      })\n    } else if (this.state.count > 4 && this.state.count < 12) {\n      this.setState({\n        prompt: 'hold',\n        inhaleTrue: false,\n        holdTrue: true,\n        exhaleTrue: false\n      })\n    } else if (this.state.count > 11 && this.state.count < 20) {\n      this.setState({\n        prompt: 'exhale',\n        inhaleTrue: false,\n        holdTrue: false,\n        exhaleTrue: true\n      })\n    } else {\n      this.setState({\n        prompt: 'inhale',\n        count: 1\n      })\n    }\n  }\n\n  updateSeconds() {\n    if (this.state.seconds === 0) {\n      if (this.state.inhaleTrue === true) {\n        this.setState({\n          seconds: 7\n        })\n      } else if (this.state.holdTrue === true) {\n        this.setState({\n          seconds: 8\n        })\n      } else if (this.state.exhaleTrue === true) {\n        this.setState({\n          seconds: 4\n        })\n      } \n    }\n  }\n\n  startTimer() {\n    clearInterval(this.timer)\n    this.timer = setInterval(this.tick.bind(this), 1000)\n  }\n\n  render() {\n    return (\n      <div className='counter-container'>\n        <h2 className='breathing-instructions'>{this.state.prompt}</h2>        \n        <h1 className='second-display'>{this.state.seconds}</h1>\n      </div>   \n    )\n  }\n}","import React, { Component } from 'react';\nimport Timer from './Timer';\nimport '../../src/styles/main.scss';\n\nexport default class Circle extends Component {\n  constructor() {\n    super();\n    this.state = {\n    };\n  }; \n\n  render() {\n    return(\n      <div className=\"circle-container\">\n        <Timer />\n      </div>\n    )\n  };\n};\n\n","import React, { Component } from 'react';\nimport '../../src/styles/main.scss';\nvar data = require('../../src/messageData.json');\n\nexport default class Message extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0,\n      currentMessage: '',\n      allMessages: []\n    }\n  };\n\n  componentWillMount() {\n    this.startTimer()\n    this.createAllMessages()\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer)\n  }\n\n  createAllMessages() {\n    let messageArray = data.map((currentMessage) => {\n      return currentMessage.message;\n    })\n    this.setState({\n      allMessages: messageArray\n    });\n  }\n\n  generateRandomMessage() {\n    let newMessage = this.state.allMessages[Math.floor(Math.random() * this.state.allMessages.length)];\n    return newMessage;\n  }\n\n  tick() {\n    this.setState({\n      count: (this.state.count + 1),\n    })\n  }\n\n  startTimer() {\n    clearInterval(this.timer)\n    this.timer = setInterval(this.tick.bind(this), 19000)\n  }\n\n  render() {\n    return(\n      <div className=\"message-container\">\n        <h2 className=\"message-text\">{this.generateRandomMessage()}</h2>\n      </div>\n    )\n  };\n};\n\n","import React, { Component } from 'react';\nimport '../../src/styles/main.scss';\n\nexport default class Options extends Component {\n  constructor() {\n    super();\n    this.state = {\n    }\n  }\n\n  render() {\n    return(\n      <div className=\"options-container\">\n        <button className=\"reset-button\" onClick={this.props.toggleSplash}>finished</button>\n      </div>\n    )\n  }\n};\n\n","import React, { Component } from 'react';\nimport Splash from './Splash';\nimport Bubbles from './Bubbles';\nimport Circle from './Circle';\nimport Message from './Message';\nimport Options from './Options';\nimport '../../src/styles/main.scss';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      renderSplash: true\n    };\n  };\n\n  toggleSplash = () => {\n    this.setState({\n      renderSplash: !this.state.renderSplash\n    });\n  };\n\n  render() {\n    if (this.state.renderSplash) {\n      return (\n        <div className=\"splash-container\">\n          <h1 className=\"app-title\">ctrl</h1>\n          <Splash toggleSplash={this.toggleSplash}\n                  addClass={this.addClass}/>\n          <h2 className=\"app-subtitle\">( control )</h2>\n          <Bubbles />\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"app-container\">\n          <Message />\n          <Circle />\n          <Options toggleSplash={this.toggleSplash}/>\n          <Bubbles />\n        </div>\n      )\n    }  \n  };\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}